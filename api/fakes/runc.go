// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type RunC struct {
	GetNetNSPathStub        func(containerID string) (string, error)
	getNetNSPathMutex       sync.RWMutex
	getNetNSPathArgsForCall []struct {
		containerID string
	}
	getNetNSPathReturns struct {
		result1 string
		result2 error
	}
	getNetNSPathReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RunC) GetNetNSPath(containerID string) (string, error) {
	fake.getNetNSPathMutex.Lock()
	ret, specificReturn := fake.getNetNSPathReturnsOnCall[len(fake.getNetNSPathArgsForCall)]
	fake.getNetNSPathArgsForCall = append(fake.getNetNSPathArgsForCall, struct {
		containerID string
	}{containerID})
	fake.recordInvocation("GetNetNSPath", []interface{}{containerID})
	fake.getNetNSPathMutex.Unlock()
	if fake.GetNetNSPathStub != nil {
		return fake.GetNetNSPathStub(containerID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getNetNSPathReturns.result1, fake.getNetNSPathReturns.result2
}

func (fake *RunC) GetNetNSPathCallCount() int {
	fake.getNetNSPathMutex.RLock()
	defer fake.getNetNSPathMutex.RUnlock()
	return len(fake.getNetNSPathArgsForCall)
}

func (fake *RunC) GetNetNSPathArgsForCall(i int) string {
	fake.getNetNSPathMutex.RLock()
	defer fake.getNetNSPathMutex.RUnlock()
	return fake.getNetNSPathArgsForCall[i].containerID
}

func (fake *RunC) GetNetNSPathReturns(result1 string, result2 error) {
	fake.GetNetNSPathStub = nil
	fake.getNetNSPathReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *RunC) GetNetNSPathReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetNetNSPathStub = nil
	if fake.getNetNSPathReturnsOnCall == nil {
		fake.getNetNSPathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getNetNSPathReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *RunC) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getNetNSPathMutex.RLock()
	defer fake.getNetNSPathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RunC) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
